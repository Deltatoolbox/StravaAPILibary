### YamlMime:ManagedReference
items:
- uid: StravaAPILibary.Authentication.Credentials
  commentId: T:StravaAPILibary.Authentication.Credentials
  id: Credentials
  parent: StravaAPILibary.Authentication
  children:
  - StravaAPILibary.Authentication.Credentials.#ctor(System.String,System.String,System.String)
  - StravaAPILibary.Authentication.Credentials.AccessToken
  - StravaAPILibary.Authentication.Credentials.ClientId
  - StravaAPILibary.Authentication.Credentials.ClientSecret
  - StravaAPILibary.Authentication.Credentials.RefreshToken
  - StravaAPILibary.Authentication.Credentials.Scope
  - StravaAPILibary.Authentication.Credentials.TokenExpiration
  langs:
  - csharp
  - vb
  name: Credentials
  nameWithType: Credentials
  fullName: StravaAPILibary.Authentication.Credentials
  type: Class
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: Credentials
    path: Authentication/credentials.cs
    startLine: 92
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Represents the credentials required for authenticating with the Strava API.
  remarks: >-
    The <code>Credentials</code> class encapsulates all the necessary information for OAuth 2.0 authentication with the Strava API.

    It stores both the application credentials (client ID and secret) and the user's OAuth tokens (access token and refresh token).


    <p><b>Application Credentials:</b></p>

    <ul><li><code>ClientId</code> - Unique identifier for your Strava application</li><li><code>ClientSecret</code> - Secret key for your Strava application (keep secure)</li><li><code>Scope</code> - Requested permissions for the application</li></ul>


    <p><b>OAuth Tokens:</b></p>

    <ul><li><code>AccessToken</code> - Used for API requests (expires in 6 hours)</li><li><code>RefreshToken</code> - Used to get new access tokens (no expiration)</li><li><code>TokenExpiration</code> - When the access token expires</li></ul>


    <p><b>Security Considerations:</b></p>

    <ul><li>Never expose the client secret in client-side code</li><li>Store tokens securely (environment variables, secure storage)</li><li>Request minimal scopes needed for your application</li><li>Implement proper token refresh logic</li></ul>


    <p><b>Usage Example:</b></p>


    <pre><code class="lang-csharp">// Create credentials for a new application

    var credentials = new Credentials("your_client_id", "your_client_secret", "read,activity:read_all");


    // After OAuth flow, tokens will be populated

    Console.WriteLine($"Access Token: {credentials.AccessToken}");

    Console.WriteLine($"Refresh Token: {credentials.RefreshToken}");

    Console.WriteLine($"Expires: {credentials.TokenExpiration}");


    // Check if token is expired

    bool isExpired = credentials.TokenExpiration &lt;= DateTime.UtcNow;</code></pre>


    <p><b>Available Scopes:</b></p>

    <ul><li>read - Basic profile access</li><li>activity:read_all - Read all activities</li><li>activity:write - Upload activities</li><li>profile:read_all - Detailed profile access</li><li>profile:write - Update profile information</li></ul>
  example:
  - >-
    <p>Complete authentication flow with credentials:</p>


    <pre><code class="lang-csharp">public class StravaClient

    {
        private readonly Credentials _credentials;

        public StravaClient(string clientId, string clientSecret, string scope)
        {
            _credentials = new Credentials(clientId, clientSecret, scope);
        }

        public async Task&lt;string&gt; AuthenticateAsync()
        {
            var userAuth = new UserAuthentication(_credentials, "http://localhost:8080/callback", _credentials.Scope);

            userAuth.StartAuthorization();
            string authCode = await userAuth.WaitForAuthCodeAsync();

            bool success = await userAuth.ExchangeCodeForTokenAsync(authCode);
            if (success)
            {
                return _credentials.AccessToken;
            }

            throw new InvalidOperationException("Authentication failed.");
        }

        public bool IsTokenValid()
        {
            return !string.IsNullOrEmpty(_credentials.AccessToken) &amp;&amp;
                   _credentials.TokenExpiration &gt; DateTime.UtcNow.AddMinutes(5);
        }
    }</code></pre>
  syntax:
    content: public class Credentials
    content.vb: Public Class Credentials
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: StravaAPILibary.Authentication.Credentials.ClientId
  commentId: P:StravaAPILibary.Authentication.Credentials.ClientId
  id: ClientId
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: ClientId
  nameWithType: Credentials.ClientId
  fullName: StravaAPILibary.Authentication.Credentials.ClientId
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: ClientId
    path: Authentication/credentials.cs
    startLine: 117
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the client ID provided by Strava for the application.
  remarks: >-
    The client ID is a unique identifier for your Strava application. It is provided when you create

    a new application in the Strava API settings.


    <p>This value is used in:</p>

    <ul><li>OAuth authorization URL generation</li><li>Token exchange requests</li><li>Token refresh requests</li></ul>


    <p><b>Security:</b></p>

    The client ID is not sensitive and can be safely included in client-side code.
  example:
  - >-
    <pre><code class="lang-csharp">var credentials = new Credentials("12345", "secret", "read");

    Console.WriteLine(credentials.ClientId); // Output: 12345</code></pre>
  syntax:
    content: public string ClientId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ClientId As String
  overload: StravaAPILibary.Authentication.Credentials.ClientId*
- uid: StravaAPILibary.Authentication.Credentials.ClientSecret
  commentId: P:StravaAPILibary.Authentication.Credentials.ClientSecret
  id: ClientSecret
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: ClientSecret
  nameWithType: Credentials.ClientSecret
  fullName: StravaAPILibary.Authentication.Credentials.ClientSecret
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: ClientSecret
    path: Authentication/credentials.cs
    startLine: 144
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the client secret associated with the Strava application.
  remarks: >-
    The client secret is a sensitive credential that should be kept secure. It is used to authenticate

    your application with Strava during the OAuth token exchange process.


    <p><b>Security Requirements:</b></p>

    <ul><li>Never expose in client-side code</li><li>Store securely (environment variables, secure storage)</li><li>Don't commit to version control</li><li>Rotate if compromised</li></ul>


    <p><b>Usage:</b></p>

    The client secret is only used server-side during OAuth token exchange and refresh operations.
  example:
  - >-
    <pre><code class="lang-csharp">// Load from environment variable (recommended)

    string clientSecret = Environment.GetEnvironmentVariable("STRAVA_CLIENT_SECRET");

    var credentials = new Credentials("12345", clientSecret, "read");</code></pre>
  syntax:
    content: public string ClientSecret { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ClientSecret As String
  overload: StravaAPILibary.Authentication.Credentials.ClientSecret*
- uid: StravaAPILibary.Authentication.Credentials.AccessToken
  commentId: P:StravaAPILibary.Authentication.Credentials.AccessToken
  id: AccessToken
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: AccessToken
  nameWithType: Credentials.AccessToken
  fullName: StravaAPILibary.Authentication.Credentials.AccessToken
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: AccessToken
    path: Authentication/credentials.cs
    startLine: 174
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the OAuth access token used for API requests.
  remarks: >-
    The access token is obtained through the OAuth 2.0 authorization flow and is used to authenticate

    API requests to Strava. It expires after 6 hours and must be refreshed using the refresh token.


    <p><b>Token Properties:</b></p>

    <ul><li>Expires after 6 hours</li><li>Used in Authorization header: Bearer {access_token}</li><li>Can be refreshed using RefreshToken</li><li>Should be stored securely</li></ul>


    <p><b>Validation:</b></p>

    Check TokenExpiration to determine if the token is still valid.
  example:
  - >-
    <pre><code class="lang-csharp">// Use access token for API requests

    using var client = new HttpClient();

    client.DefaultRequestHeaders.Authorization = 
        new AuthenticationHeaderValue("Bearer", credentials.AccessToken);

    var response = await client.GetAsync("https://www.strava.com/api/v3/athlete");</code></pre>
  syntax:
    content: public string AccessToken { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property AccessToken As String
  overload: StravaAPILibary.Authentication.Credentials.AccessToken*
- uid: StravaAPILibary.Authentication.Credentials.RefreshToken
  commentId: P:StravaAPILibary.Authentication.Credentials.RefreshToken
  id: RefreshToken
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: RefreshToken
  nameWithType: Credentials.RefreshToken
  fullName: StravaAPILibary.Authentication.Credentials.RefreshToken
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: RefreshToken
    path: Authentication/credentials.cs
    startLine: 210
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the OAuth refresh token used to obtain a new access token when it expires.
  remarks: >-
    The refresh token is obtained during the initial OAuth authorization and can be used to get new

    access tokens without requiring user re-authorization. Refresh tokens do not expire unless revoked.


    <p><b>Token Properties:</b></p>

    <ul><li>No expiration (until revoked by user)</li><li>Used only for token refresh operations</li><li>Should be stored securely alongside access token</li><li>Can be revoked by user in Strava settings</li></ul>


    <p><b>Usage:</b></p>

    Use this token with <code>UserAuthentication.RefreshAccessTokenAsync()</code> to get a new access token.
  example:
  - >-
    <pre><code class="lang-csharp">// Refresh access token when expired

    if (credentials.TokenExpiration &lt;= DateTime.UtcNow.AddMinutes(5))

    {
        var userAuth = new UserAuthentication(credentials, redirectUri, scope);
        bool success = await userAuth.RefreshAccessTokenAsync();

        if (success)
        {
            // New access token is now available
            Console.WriteLine("Token refreshed successfully");
        }
    }</code></pre>
  syntax:
    content: public string RefreshToken { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RefreshToken As String
  overload: StravaAPILibary.Authentication.Credentials.RefreshToken*
- uid: StravaAPILibary.Authentication.Credentials.Scope
  commentId: P:StravaAPILibary.Authentication.Credentials.Scope
  id: Scope
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: Scope
  nameWithType: Credentials.Scope
  fullName: StravaAPILibary.Authentication.Credentials.Scope
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: Scope
    path: Authentication/credentials.cs
    startLine: 247
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the scope of access for the token.
  remarks: >-
    The scope defines what permissions your application has been granted by the user. Multiple scopes

    can be combined using commas.


    <p><b>Available Scopes:</b></p>

    <ul><li>read - Basic profile access (always included)</li><li>activity:read_all - Read all activities</li><li>activity:write - Upload activities</li><li>profile:read_all - Detailed profile access</li><li>profile:write - Update profile information</li></ul>


    <p><b>Best Practices:</b></p>

    <ul><li>Request only the scopes you need</li><li>Explain to users why you need each scope</li><li>Handle cases where users deny certain scopes</li></ul>
  example:
  - >-
    <pre><code class="lang-csharp">// Minimal scope for basic functionality

    var credentials = new Credentials("client_id", "secret", "read");


    // Full scope for complete functionality

    var credentials = new Credentials("client_id", "secret", "read,activity:read_all,activity:write");


    // Check if specific scope is granted

    bool hasActivityRead = credentials.Scope.Contains("activity:read_all");</code></pre>
  syntax:
    content: public string Scope { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Scope As String
  overload: StravaAPILibary.Authentication.Credentials.Scope*
- uid: StravaAPILibary.Authentication.Credentials.TokenExpiration
  commentId: P:StravaAPILibary.Authentication.Credentials.TokenExpiration
  id: TokenExpiration
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: TokenExpiration
  nameWithType: Credentials.TokenExpiration
  fullName: StravaAPILibary.Authentication.Credentials.TokenExpiration
  type: Property
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: TokenExpiration
    path: Authentication/credentials.cs
    startLine: 281
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Gets or sets the expiration date and time of the current access token.
  remarks: >-
    This property indicates when the current access token will expire. Access tokens expire after 6 hours

    from the time they were issued. After expiration, you must use the refresh token to get a new access token.


    <p><b>Token Lifecycle:</b></p>

    <ol><li>Token is issued (expires in 6 hours)</li><li>Use token for API requests</li><li>Check expiration before making requests</li><li>Refresh token when close to expiration</li></ol>


    <p><b>Validation:</b></p>

    Check if token is expired: TokenExpiration &lt;= DateTime.UtcNow

    Check if token expires soon: TokenExpiration &lt;= DateTime.UtcNow.AddMinutes(5)
  example:
  - >-
    <pre><code class="lang-csharp">// Check if token is expired

    bool isExpired = credentials.TokenExpiration &lt;= DateTime.UtcNow;


    // Check if token expires soon (within 5 minutes)

    bool expiresSoon = credentials.TokenExpiration &lt;= DateTime.UtcNow.AddMinutes(5);


    // Calculate time until expiration

    TimeSpan timeUntilExpiration = credentials.TokenExpiration - DateTime.UtcNow;

    Console.WriteLine($"Token expires in {timeUntilExpiration.TotalMinutes:F0} minutes");</code></pre>
  syntax:
    content: public DateTime TokenExpiration { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property TokenExpiration As Date
  overload: StravaAPILibary.Authentication.Credentials.TokenExpiration*
- uid: StravaAPILibary.Authentication.Credentials.#ctor(System.String,System.String,System.String)
  commentId: M:StravaAPILibary.Authentication.Credentials.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: StravaAPILibary.Authentication.Credentials
  langs:
  - csharp
  - vb
  name: Credentials(string, string, string)
  nameWithType: Credentials.Credentials(string, string, string)
  fullName: StravaAPILibary.Authentication.Credentials.Credentials(string, string, string)
  type: Constructor
  source:
    remote:
      path: Authentication/credentials.cs
      branch: master
      repo: https://github.com/Deltatoolbox/StravaAPILibary.git
    id: .ctor
    path: Authentication/credentials.cs
    startLine: 329
  assemblies:
  - StravaAPILibary
  namespace: StravaAPILibary.Authentication
  summary: Initializes a new instance of the <xref href="StravaAPILibary.Authentication.Credentials" data-throw-if-not-resolved="false"></xref> class with the specified client ID, client secret, and scope.
  remarks: >-
    This constructor initializes a new credentials object with the application's client credentials and requested scope.

    The OAuth tokens (access token, refresh token, expiration) will be populated after a successful OAuth flow.


    <p><b>Parameter Validation:</b></p>

    <ul><li>Client ID must be a valid Strava application ID</li><li>Client secret must match the client ID</li><li>Scope must be valid Strava OAuth scopes</li></ul>


    <p><b>Common Scopes:</b></p>

    <ul><li>read - Basic profile access (recommended minimum)</li><li>read,activity:read_all - Read profile and activities</li><li>read,activity:read_all,activity:write - Full activity access</li></ul>
  example:
  - >-
    <pre><code class="lang-csharp">// Basic credentials with minimal scope

    var credentials = new Credentials("12345", "your_secret", "read");


    // Credentials with full activity access

    var credentials = new Credentials("12345", "your_secret", "read,activity:read_all,activity:write");


    // Load from environment variables (recommended for production)

    string clientId = Environment.GetEnvironmentVariable("STRAVA_CLIENT_ID") 
        ?? throw new InvalidOperationException("STRAVA_CLIENT_ID not set");
    string clientSecret = Environment.GetEnvironmentVariable("STRAVA_CLIENT_SECRET") 
        ?? throw new InvalidOperationException("STRAVA_CLIENT_SECRET not set");
    var credentials = new Credentials(clientId, clientSecret, "read,activity:read_all");</code></pre>
  syntax:
    content: public Credentials(string clientId, string clientSecret, string scope)
    parameters:
    - id: clientId
      type: System.String
      description: The client ID provided by Strava for the application. Must not be null or empty.
    - id: clientSecret
      type: System.String
      description: The client secret associated with the Strava application. Must not be null or empty.
    - id: scope
      type: System.String
      description: The scope of access required for API interactions. Multiple scopes can be separated by commas (e.g., read,activity:read_all).
    content.vb: Public Sub New(clientId As String, clientSecret As String, scope As String)
  overload: StravaAPILibary.Authentication.Credentials.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when <code class="paramref">clientId</code>, <code class="paramref">clientSecret</code>, or <code class="paramref">scope</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when <code class="paramref">clientId</code>, <code class="paramref">clientSecret</code>, or <code class="paramref">scope</code> is empty or whitespace.
  nameWithType.vb: Credentials.New(String, String, String)
  fullName.vb: StravaAPILibary.Authentication.Credentials.New(String, String, String)
  name.vb: New(String, String, String)
references:
- uid: StravaAPILibary.Authentication
  commentId: N:StravaAPILibary.Authentication
  href: StravaAPILibary.html
  name: StravaAPILibary.Authentication
  nameWithType: StravaAPILibary.Authentication
  fullName: StravaAPILibary.Authentication
  spec.csharp:
  - uid: StravaAPILibary
    name: StravaAPILibary
    href: StravaAPILibary.html
  - name: .
  - uid: StravaAPILibary.Authentication
    name: Authentication
    href: StravaAPILibary.Authentication.html
  spec.vb:
  - uid: StravaAPILibary
    name: StravaAPILibary
    href: StravaAPILibary.html
  - name: .
  - uid: StravaAPILibary.Authentication
    name: Authentication
    href: StravaAPILibary.Authentication.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: StravaAPILibary.Authentication.Credentials.ClientId*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.ClientId
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_ClientId
  name: ClientId
  nameWithType: Credentials.ClientId
  fullName: StravaAPILibary.Authentication.Credentials.ClientId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: StravaAPILibary.Authentication.Credentials.ClientSecret*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.ClientSecret
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_ClientSecret
  name: ClientSecret
  nameWithType: Credentials.ClientSecret
  fullName: StravaAPILibary.Authentication.Credentials.ClientSecret
- uid: StravaAPILibary.Authentication.Credentials.AccessToken*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.AccessToken
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_AccessToken
  name: AccessToken
  nameWithType: Credentials.AccessToken
  fullName: StravaAPILibary.Authentication.Credentials.AccessToken
- uid: StravaAPILibary.Authentication.Credentials.RefreshToken*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.RefreshToken
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_RefreshToken
  name: RefreshToken
  nameWithType: Credentials.RefreshToken
  fullName: StravaAPILibary.Authentication.Credentials.RefreshToken
- uid: StravaAPILibary.Authentication.Credentials.Scope*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.Scope
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_Scope
  name: Scope
  nameWithType: Credentials.Scope
  fullName: StravaAPILibary.Authentication.Credentials.Scope
- uid: StravaAPILibary.Authentication.Credentials.TokenExpiration*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.TokenExpiration
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials_TokenExpiration
  name: TokenExpiration
  nameWithType: Credentials.TokenExpiration
  fullName: StravaAPILibary.Authentication.Credentials.TokenExpiration
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: StravaAPILibary.Authentication.Credentials
  commentId: T:StravaAPILibary.Authentication.Credentials
  parent: StravaAPILibary.Authentication
  href: StravaAPILibary.Authentication.Credentials.html
  name: Credentials
  nameWithType: Credentials
  fullName: StravaAPILibary.Authentication.Credentials
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentnullexception
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentexception
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: StravaAPILibary.Authentication.Credentials.#ctor*
  commentId: Overload:StravaAPILibary.Authentication.Credentials.#ctor
  href: StravaAPILibary.Authentication.Credentials.html#StravaAPILibary_Authentication_Credentials__ctor_System_String_System_String_System_String_
  name: Credentials
  nameWithType: Credentials.Credentials
  fullName: StravaAPILibary.Authentication.Credentials.Credentials
  nameWithType.vb: Credentials.New
  fullName.vb: StravaAPILibary.Authentication.Credentials.New
  name.vb: New
